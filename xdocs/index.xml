<?xml version="1.0"?>
<document url="./index.xml">
<properties>
  <title>The Tiles 1.1 Framework Project</title>
</properties>

<body>

<section name="Welcome To Tiles">
    <p>Welcome to the Struts Tiles subproject.  Tiles is a templating 
    framework.  It can be used to create a common look &amp; feel for a web site or
    application and to create reusable view components.  This site will give you
    all the information you need to get started.</p>
</section>

<section name="Tiles Features" href="Features">
     <ul>
          <li>Screen definitions
             <ul>
                <li>Create a screen by assembling
                   <strong><em>Tiles</em></strong> : header, footer,
                   menu, body, etc.
                </li>
                <li>
                   Definitions can take place : 
                   <ul>
                      <li>in a centralized xml file</li>
                      <li>directly in jsp pages</li>
                      <li>programatically in struts actions</li>
                   </ul>
                </li>
                <li>
                   Definitions provide an inheritance
                   mechanism : a definition can extend another one,
                   and override parameters.
                </li>
             </ul>
          </li>
          <li>
             Layouts 
             <ul>
                <li>
                   Define common page layouts and reuse
                   them across your web site.
                </li>
                <li>
                   Define menu layouts, and use them by
                   passing lists of items and links.
                </li>
                <li>
                   Define a portal layout, use it by
                   passing a list of <strong><em>Tiles</em></strong>
                   (pages) to show.
                </li>
                <li>
                   Reuse existing layouts, or define
                   your own.
                </li>
             </ul>
          </li>
          <li>
             Dynamic page building 
             <ul>
                <li>
                   Tiles can be gathered dynamically during
                   page reload. It is possible to change any attribute:
                   layout, list of Tiles in portal, list of menu
                   items, etc.
                </li>
             </ul>
          </li>
          <li>
             Reuse of <strong><em>Tiles</em></strong> /
             Components 
             <ul>
                <li>
                   If well defined, a
                   <strong><em>Tile</em></strong> can be reused across multiple
                   applications.
                </li>
                <li>
                   Dynamic attributes are used to
                   parameterize <em><strong>Tiles</strong></em>.
                </li>
                <li>
                   It is possible to define a library of
                   reusable <em><strong>Tiles</strong></em>.
                </li>
                <li>
                   Build a page by assembling predefined
                   components, giving them appropriate parameters.
                </li>
             </ul>
          </li>
          <li>
             Internationalization (i18n)
          </li>
          <ul>
          <li>
             It is possible to load different tiles
             according to Locale.
          </li>
          <li>
             A mechanism similar to Java properties
             files is used for definitions files: you can have one
             definition file per Locale. The appropriate definition is
             loaded according to the current Locale.
          </li>
          </ul>
          <li>
             Multi-channels
          </li>
          <ul>
          <li>
             It is possible to load different Tiles
             according to a key.
          </li>
          
          <li>
             For example, the key could be user provilege,
             browser type, arbitrary name stored in session, etc.
          </li>
          
          <li>
             A mechanism similar to Java properties
             files is used for definitions files: you can have one
             definition file per key. The appropriate definition is
             loaded according to the key.
          </li>
          </ul>
       </ul>

</section>

</body>
</document>
